import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.sql.*;

public class BankManagementSystem extends Application {
    private Connection connection;
    private TableView<Client> tableView;

    @Override
    public void start(Stage primaryStage) {
        connectToDatabase();

        tableView = new TableView<>();
        populateTableView();

        VBox customerManagementToolbox = createCustomerManagementToolbox();
        VBox financialAnalysisToolbox = createFinancialAnalysisToolbox();
        VBox loanManagementToolbox = createLoanManagementToolbox();
        VBox reportingToolbox = createReportingToolbox();

        BorderPane root = new BorderPane();
        root.setTop(createMenuBar());
        root.setLeft(customerManagementToolbox);
        root.setCenter(financialAnalysisToolbox);
        root.setRight(loanManagementToolbox);
        root.setBottom(reportingToolbox);

        VBox mainLayout = new VBox(10);
        mainLayout.getChildren().addAll(root, new Label("Statusi:"), tableView);
        mainLayout.setPadding(new Insets(10));

        Scene scene = new Scene(mainLayout, 800, 600);

        // Shto stilet CSS për të ndryshuar ngjyrat dhe shkronjat
        scene.getStylesheets().add("styles.css");

        primaryStage.setScene(scene);
        primaryStage.setTitle("Bank Management System");
        primaryStage.show();
    }

    private void connectToDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/bankmanagement";
            String username = "your_username";
            String password = "your_password";
            connection = DriverManager.getConnection(url, username, password);
            System.out.println("Connected to the database.");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void populateTableView() {
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM Client");

            while (resultSet.next()) {
                int clientID = resultSet.getInt("ClientID");
                String firstName = resultSet.getString("FirstName");
                String lastName = resultSet.getString("LastName");
                String email = resultSet.getString("Email");
                boolean newsEnabled = resultSet.getBoolean("NewsEnabled");
                boolean specialOffersEnabled = resultSet.getBoolean("SpecialOffersEnabled");

                Client client = new Client(clientID, firstName, lastName, email, newsEnabled, specialOffersEnabled);
                tableView.getItems().add(client);
            }

            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private VBox createCustomerManagementToolbox() {
        VBox customerManagementToolbox = new VBox(10);
        Button createClientButton = new Button("Krijo Klient");
        customerManagementToolbox.getChildren().add(createClientButton);

        createClientButton.setOnAction(e -> createClient());

        return customerManagementToolbox;
    }

    private void createClient() {
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.setPadding(new Insets(10));

        Label nameLabel = new Label("Emri:");
        TextField nameField = new TextField();

        Label surnameLabel = new Label("Mbiemri:");
        TextField surnameField = new TextField();

        Label emailLabel = new Label("Emaili:");
        TextField emailField = new TextField();

        CheckBox newsCheckBox = new CheckBox("Merr lajme dhe informacione");
        CheckBox specialOffersCheckBox = new CheckBox("Oferta të veçanta");

        Button createButton = new Button("Krijo Klient");
        createButton.setOnAction(e -> {
            String name = nameField.getText();
            String surname = surnameField.getText();
            String email = emailField.getText();
            boolean newsEnabled = newsCheckBox.isSelected();
            boolean specialOffersEnabled = specialOffersCheckBox.isSelected();

            saveClientToDatabase(name, surname, email, newsEnabled, specialOffersEnabled);
        });

        gridPane.add(nameLabel, 0, 0);
        gridPane.add(nameField, 1, 0);
        gridPane.add(surnameLabel, 0, 1);
        gridPane.add(surnameField, 1, 1);
        gridPane.add(emailLabel, 0, 2);
        gridPane.add(emailField, 1, 2);
        gridPane.add(newsCheckBox, 0, 3);
        gridPane.add(specialOffersCheckBox, 1, 3);
        gridPane.add(createButton, 0, 4, 2, 1);

        Stage stage = new Stage();
        stage.setScene(new Scene(gridPane, 400, 200));
        stage.setTitle("Krijo Klient");
        stage.show();
    }

    private void saveClientToDatabase(String name, String surname, String email, boolean newsEnabled, boolean specialOffersEnabled) {
        try {
            PreparedStatement statement = connection.prepareStatement("INSERT INTO Client (FirstName, LastName, Email, NewsEnabled, SpecialOffersEnabled) VALUES (?, ?, ?, ?, ?)");
            statement.setString(1, name);
            statement.setString(2, surname);
            statement.setString(3, email);
            statement.setBoolean(4, newsEnabled);
            statement.setBoolean(5, specialOffersEnabled);

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Client saved to the database.");
            }

            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private VBox createFinancialAnalysisToolbox() {
        VBox financialAnalysisToolbox = new VBox(10);
        // Implement functionality specific to financial analysis

        return financialAnalysisToolbox;
    }

    private VBox createLoanManagementToolbox() {
        VBox loanManagementToolbox = new VBox(10);
        // Implement functionality specific to loan management

        return loanManagementToolbox;
    }

    private VBox createReportingToolbox() {
        VBox reportingToolbox = new VBox(10);
        // Implement functionality specific to reporting

        return reportingToolbox;
    }

    private MenuBar createMenuBar() {
        MenuBar menuBar = new MenuBar();

        Menu fileMenu = new Menu("File");
        MenuItem exitMenuItem = new MenuItem("Exit");
        fileMenu.getItems().add(exitMenuItem);

        Menu clientMenu = new Menu("Klientë");
        MenuItem createClientItem = new MenuItem("Krijo Klient");
        clientMenu.getItems().add(createClientItem);

        Menu loanMenu = new Menu("Kredi");
        MenuItem createLoanItem = new MenuItem("Krijo Kredi");
        MenuItem updateStatusItem = new MenuItem("Aktualizo Statusin");
        loanMenu.getItems().addAll(createLoanItem, updateStatusItem);

        Menu reportMenu = new Menu("Raporte");
        MenuItem showReportsItem = new MenuItem("Shfaq Raportet");
        reportMenu.getItems().add(showReportsItem);

        Menu shortcutMenu = new Menu("Shkurtesat");
        MenuItem createClientShortcut = new MenuItem("Krijo Klient");
        MenuItem createLoanShortcut = new MenuItem("Krijo Kredi");
        MenuItem showReportsShortcut = new MenuItem("Shfaq Raportet");
        MenuItem updateStatusShortcut = new MenuItem("Aktualizo Statusin");
        MenuItem exitShortcut = new MenuItem("Çkyç aplikacionin");
        shortcutMenu.getItems().addAll(createClientShortcut, createLoanShortcut, showReportsShortcut, updateStatusShortcut, exitShortcut);

        menuBar.getMenus().addAll(fileMenu, clientMenu, loanMenu, reportMenu, shortcutMenu);

        // Add functionality to menu items
        createClientItem.setOnAction(e -> createClient());
        createLoanItem.setOnAction(e -> createLoan());
        showReportsItem.setOnAction(e -> showReports());
        updateStatusItem.setOnAction(e -> updateStatus());

        createClientShortcut.setOnAction(e -> createClient());
        createLoanShortcut.setOnAction(e -> createLoan());
        showReportsShortcut.setOnAction(e -> showReports());
        updateStatusShortcut.setOnAction(e -> updateStatus());
        exitShortcut.setOnAction(e -> System.exit(0));

        return menuBar;
    }

    private void createLoan() {
        // Implement functionality for creating a loan
    }

    private void showReports() {
        // Implement functionality for showing reports
    }

    private void updateStatus() {
        // Implement functionality for updating status
    }

    public static void main(String[] args) {
        launch(args);
    }
}

